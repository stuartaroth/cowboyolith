//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrgRolesAndPermissions = newOrgRolesAndPermissionsTable("public", "org_roles_and_permissions", "")

type orgRolesAndPermissionsTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnString
	Name             postgres.ColumnString
	CanMutateGroups  postgres.ColumnBool
	CanViewAllUsers  postgres.ColumnBool
	CanViewAllGroups postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrgRolesAndPermissionsTable struct {
	orgRolesAndPermissionsTable

	EXCLUDED orgRolesAndPermissionsTable
}

// AS creates new OrgRolesAndPermissionsTable with assigned alias
func (a OrgRolesAndPermissionsTable) AS(alias string) *OrgRolesAndPermissionsTable {
	return newOrgRolesAndPermissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrgRolesAndPermissionsTable with assigned schema name
func (a OrgRolesAndPermissionsTable) FromSchema(schemaName string) *OrgRolesAndPermissionsTable {
	return newOrgRolesAndPermissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrgRolesAndPermissionsTable with assigned table prefix
func (a OrgRolesAndPermissionsTable) WithPrefix(prefix string) *OrgRolesAndPermissionsTable {
	return newOrgRolesAndPermissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrgRolesAndPermissionsTable with assigned table suffix
func (a OrgRolesAndPermissionsTable) WithSuffix(suffix string) *OrgRolesAndPermissionsTable {
	return newOrgRolesAndPermissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrgRolesAndPermissionsTable(schemaName, tableName, alias string) *OrgRolesAndPermissionsTable {
	return &OrgRolesAndPermissionsTable{
		orgRolesAndPermissionsTable: newOrgRolesAndPermissionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newOrgRolesAndPermissionsTableImpl("", "excluded", ""),
	}
}

func newOrgRolesAndPermissionsTableImpl(schemaName, tableName, alias string) orgRolesAndPermissionsTable {
	var (
		IDColumn               = postgres.StringColumn("id")
		NameColumn             = postgres.StringColumn("name")
		CanMutateGroupsColumn  = postgres.BoolColumn("can_mutate_groups")
		CanViewAllUsersColumn  = postgres.BoolColumn("can_view_all_users")
		CanViewAllGroupsColumn = postgres.BoolColumn("can_view_all_groups")
		allColumns             = postgres.ColumnList{IDColumn, NameColumn, CanMutateGroupsColumn, CanViewAllUsersColumn, CanViewAllGroupsColumn}
		mutableColumns         = postgres.ColumnList{NameColumn, CanMutateGroupsColumn, CanViewAllUsersColumn, CanViewAllGroupsColumn}
	)

	return orgRolesAndPermissionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		Name:             NameColumn,
		CanMutateGroups:  CanMutateGroupsColumn,
		CanViewAllUsers:  CanViewAllUsersColumn,
		CanViewAllGroups: CanViewAllGroupsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
