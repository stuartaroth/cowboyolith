//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrgGroupRolesAndPermissions = newOrgGroupRolesAndPermissionsTable("public", "org_group_roles_and_permissions", "")

type orgGroupRolesAndPermissionsTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnString
	Name             postgres.ColumnString
	CanUpdateGroup   postgres.ColumnBool
	CanInviteToGroup postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrgGroupRolesAndPermissionsTable struct {
	orgGroupRolesAndPermissionsTable

	EXCLUDED orgGroupRolesAndPermissionsTable
}

// AS creates new OrgGroupRolesAndPermissionsTable with assigned alias
func (a OrgGroupRolesAndPermissionsTable) AS(alias string) *OrgGroupRolesAndPermissionsTable {
	return newOrgGroupRolesAndPermissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrgGroupRolesAndPermissionsTable with assigned schema name
func (a OrgGroupRolesAndPermissionsTable) FromSchema(schemaName string) *OrgGroupRolesAndPermissionsTable {
	return newOrgGroupRolesAndPermissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrgGroupRolesAndPermissionsTable with assigned table prefix
func (a OrgGroupRolesAndPermissionsTable) WithPrefix(prefix string) *OrgGroupRolesAndPermissionsTable {
	return newOrgGroupRolesAndPermissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrgGroupRolesAndPermissionsTable with assigned table suffix
func (a OrgGroupRolesAndPermissionsTable) WithSuffix(suffix string) *OrgGroupRolesAndPermissionsTable {
	return newOrgGroupRolesAndPermissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrgGroupRolesAndPermissionsTable(schemaName, tableName, alias string) *OrgGroupRolesAndPermissionsTable {
	return &OrgGroupRolesAndPermissionsTable{
		orgGroupRolesAndPermissionsTable: newOrgGroupRolesAndPermissionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                         newOrgGroupRolesAndPermissionsTableImpl("", "excluded", ""),
	}
}

func newOrgGroupRolesAndPermissionsTableImpl(schemaName, tableName, alias string) orgGroupRolesAndPermissionsTable {
	var (
		IDColumn               = postgres.StringColumn("id")
		NameColumn             = postgres.StringColumn("name")
		CanUpdateGroupColumn   = postgres.BoolColumn("can_update_group")
		CanInviteToGroupColumn = postgres.BoolColumn("can_invite_to_group")
		allColumns             = postgres.ColumnList{IDColumn, NameColumn, CanUpdateGroupColumn, CanInviteToGroupColumn}
		mutableColumns         = postgres.ColumnList{NameColumn, CanUpdateGroupColumn, CanInviteToGroupColumn}
	)

	return orgGroupRolesAndPermissionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		Name:             NameColumn,
		CanUpdateGroup:   CanUpdateGroupColumn,
		CanInviteToGroup: CanInviteToGroupColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
