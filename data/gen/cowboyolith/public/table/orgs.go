//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Orgs = newOrgsTable("public", "orgs", "")

type orgsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	Name       postgres.ColumnString
	InsertedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrgsTable struct {
	orgsTable

	EXCLUDED orgsTable
}

// AS creates new OrgsTable with assigned alias
func (a OrgsTable) AS(alias string) *OrgsTable {
	return newOrgsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrgsTable with assigned schema name
func (a OrgsTable) FromSchema(schemaName string) *OrgsTable {
	return newOrgsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrgsTable with assigned table prefix
func (a OrgsTable) WithPrefix(prefix string) *OrgsTable {
	return newOrgsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrgsTable with assigned table suffix
func (a OrgsTable) WithSuffix(suffix string) *OrgsTable {
	return newOrgsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrgsTable(schemaName, tableName, alias string) *OrgsTable {
	return &OrgsTable{
		orgsTable: newOrgsTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newOrgsTableImpl("", "excluded", ""),
	}
}

func newOrgsTableImpl(schemaName, tableName, alias string) orgsTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		NameColumn       = postgres.StringColumn("name")
		InsertedAtColumn = postgres.TimestampColumn("inserted_at")
		allColumns       = postgres.ColumnList{IDColumn, NameColumn, InsertedAtColumn}
		mutableColumns   = postgres.ColumnList{NameColumn, InsertedAtColumn}
	)

	return orgsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Name:       NameColumn,
		InsertedAt: InsertedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
